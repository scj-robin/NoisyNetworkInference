NoisySBM <- (scoreList)
    scoreList = liste de d matrice n * n
    N = nombre de diades


**********************************  FAIT
InitSBM <- (scoreMat) : SD
    mclust à 2 classes sur scoreMat
    blockmodel sur classif 0/1 issue de mclust
    -> psiInit = vecteur N * 2
    -> tauInit = liste de Kmax matrices n * K 
    -> etaInit = liste de Kmax array N * K * K

Je sors aussi G (graphe estimé) et ICL de BM (qui nous aiderait à choisir sur quel K on commence à inférer notre mode_ls à nous)
Je sors un eta0 (eta1  = 1-eta0)

********************************************************************************

Dans la fonction simu les paramètres sont les suivants
#' blockProp = c(1/3,1/2,1/6)
#' nbBlocks   = length(blockProp)
#' connectParam <- matrix(rbeta(nBlocks^2,1.5,1.5 ),nBlocks,nBlocks)
#' connectParam <- 0.5*(connectParam + t(connectParam))
#' emissionParam <- list()
#' nbScores <- 4
#' emissionParam$noEdgeParam = list(mean=rep(0,nbScores),var = diag(0.1,nrow = nbScores,ncol = nbScores))  -> mu0 var0
#' emissionParam$EdgeParam = list( mean= 1:nbScores,var =  diag(0.1,nrow = nbScores,ncol = nbScores)) ->  mu1 var1 

On peut utiliser theta dans le VEM. il faut juste qu'on soit cohérent en sortie. 

********************************************************************************



Pour un K donné
psi : N * 2; tau : n * K; eta : N * K * K

Mstep <- (scoreMat, psi, tau, eta) 
    -> theta = list(pi, gamma, mu0, mu1, Sigma0, Sigma1)



VEstep <- (scoreMat, theta) : SR
    calcul de phi = matrice N * 2
    calcul des A = array n * n * K * K
    -> eta, tau, psi

lowerBound <- (scoreMat, theta, eta, tau, psi) 


********************************************************************************
Utilitaires

scoreList2scoreMat -> FAIT

scoreList2scoreArray

extractScoreGlasso



